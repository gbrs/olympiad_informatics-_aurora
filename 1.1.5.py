'''
Великое Лайнландское переселение
Лайнландия представляет из себя одномерный мир, являющийся прямой,
на котором распологаются N городов, последовательно пронумерованных от 0 до N-1 .
Направление в сторону от первого города к нулевому названо западным,
а в обратную "— восточным.

Когда в Лайнландии неожиданно начался кризис, все были жители мира
стали испытывать глубокое смятение. По всей Лайнландии стали ходить слухи,
что на востоке живётся лучше, чем на западе.

Так и началось Великое Лайнландское переселение. Обитатели мира целыми городами
отправились на восток, покинув родные улицы, и двигались до тех пор,
пока не приходили в город, в котором средняя цена проживания была меньше,
чем в родном.

Входные данные
В первой строке дано одно число N ( 2≤ N ≤ 10**5 ) — количество городов
в Лайнландии. Во второй строке дано N чисел ai ( 0 ≤ ai ≤ 10^9 ) —
средняя цена проживания в городах с нулевого по ( N-1)-ый соответственно.

Выходные данные
Для каждого города в порядке с нулевого по ( N-1)-ый выведите номер города,
в который переселятся его изначальные жители. Если жители города не остановятся
в каком-либо другом городе, отправившись в Восточное Бесконечное Ничто,
выведите -1.
'''

# Если у текущего города стоимость не меньше, чем у предыдущего, добавляю его
# (номер, стоимость проживания) в стек. Иначе записываю в карту переездов, что
# в этот город переселяются жители последнего города стека, и удаляю последнюю
# запись из стека. Снова сравниваю текущий город с последним городом стека. Когда
# стоимость окажется не выше или стек опустеет, добавляю текущий город в стек.

N = int(input())
costs = list(map(int, input().split()))  # стоимость проживания в городах

stack = []  # стэк для городов, которые пока не знаю куда переехали
migration_map = [-1] * N  # требуемая карта переездов

for i in range(N):
    while stack and stack[-1][1] > costs[i]:
        migration_map[stack[-1][0]] = i
        stack.pop()
    stack.append((i, costs[i]))

print(*migration_map)
